//use std::str::FromStr;

use crate::compose_parameters;

use crate::ast;
use crate::ast::Query;
use crate::ast::Expression;
use crate::ast::Feature;
use crate::ast::Connective;
use crate::ast::Parameter;
use crate::ast::Property;
use crate::ast::StringOperator;
use crate::ast::RelationalOperator;
use glob;

grammar;

// Lexer
match {
    r"\s*" => { },                                              // ignore whitespace
    r"/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/|(//.*)" => { }, // comments: /**/ and //

    // all keywords
    "commits"     => commits,
    "deletions"   => deletions,
    "additions"   => additions,
    "changes"     => changes,
    "path"        => path,
    "elapsedTime" => elapsed_time,
    "and"         => and,

    // symbols
    ","  => comma,
    "."  => dot,
    "("  => open_paren,
    ")"  => close_paren,
    "==" => eq,
    "!=" => ne,
    "<"  => lt,
    "<=" => le,
    ">"  => gt,
    ">=" => ge,

    // literals
    r"[-]?[0-9]+"               => INT,
    r#""([^\\"]|\\[~ntr\\])*""# => STRING,
}

pub QUERY: Query = {
    <expressions: EXPRESSIONS> => Query::simple(expressions),
}

EXPRESSIONS: ast::Expressions = {
    <head: EXPRESSION> <tail: (CONNECTIVE_AND_EXPRESSION)*> => ast::Expressions::new(head, tail),
}

CONNECTIVE_AND_EXPRESSION: (Connective, Expression) = {
    <connective: CONNECTIVE> <expression: EXPRESSION> => (connective, expression),
}

EXPRESSION: Expression = {
    <feature: FEATURE> => {
        Expression::from_feature(feature)
    },
    <left: FEATURE> <operator: RELATIONAL_OPERATOR> <right: NUMBER> => {
        Expression::new(operator, ast::Operand::from_feature(left), ast::Operand::from_number(right))
    },
    <left: NUMBER> <operator: RELATIONAL_OPERATOR> <right: FEATURE> => {
        Expression::new(operator, ast::Operand::from_number(left), ast::Operand::from_feature(right))
    },
    <left: FEATURE> <operator: RELATIONAL_OPERATOR> <right: FEATURE> => {
        Expression::new(operator, ast::Operand::from_feature(left), ast::Operand::from_feature(right))
    },
}

FEATURE: Feature = {
    commits (open_paren close_paren)? <property: (dot COMMITS_PROPERTY)?> => {
        Feature::Commits { parameters: Vec::new(), property: property.map(|e| e.1) }
    },

    commits open_paren <head: COMMITS_PARAMETER> <tail: (comma COMMITS_PARAMETER)*> comma? close_paren
            <property: (dot COMMITS_PROPERTY)?> => {
        Feature::Commits { parameters: compose_parameters!(head, tail), property: property.map(|e| e.1)}
    },

    additions (open_paren close_paren)? <property: (dot ADDITIONS_PROPERTY)?> => {
        Feature::Additions { parameters: Vec::new(), property: property.map(|e| e.1) }
    },

    additions open_paren <head: ADDITIONS_PARAMETER> <tail: (comma ADDITIONS_PARAMETER)*> comma? close_paren
            <property: (dot ADDITIONS_PROPERTY)?> => {
        Feature::Additions { parameters: compose_parameters!(head, tail), property: property.map(|e| e.1)}
    },

    deletions (open_paren close_paren)? <property: (dot DELETIONS_PROPERTY)?> => {
        Feature::Deletions { parameters: Vec::new(), property: property.map(|e| e.1) }
    },

    deletions open_paren <head: DELETIONS_PARAMETER> <tail: (comma DELETIONS_PARAMETER)*> comma? close_paren
            <property: (dot DELETIONS_PROPERTY)?> => {
        Feature::Deletions { parameters: compose_parameters!(head, tail), property: property.map(|e| e.1)}
    },

    changes (open_paren close_paren)? <property: (dot CHANGES_PROPERTY)?> => {
        Feature::Changes { parameters: Vec::new(), property: property.map(|e| e.1) }
    },

    changes open_paren <head: CHANGES_PARAMETER> <tail: (comma CHANGES_PARAMETER)*> comma? close_paren
            <property: (dot CHANGES_PROPERTY)?> => {
        Feature::Changes { parameters: compose_parameters!(head, tail), property: property.map(|e| e.1)}
    },
}

COMMITS_PARAMETER: Parameter = {
    path <operator: STRING_OPERATOR> <pattern: PATTERN> => Parameter::Path { operator, pattern },
}

ADDITIONS_PARAMETER: Parameter = {
    path <operator: STRING_OPERATOR> <pattern: PATTERN> => Parameter::Path { operator, pattern },
}

DELETIONS_PARAMETER: Parameter = {
    path <operator: STRING_OPERATOR> <pattern: PATTERN> => Parameter::Path { operator, pattern },
}

CHANGES_PARAMETER: Parameter = {
    path <operator: STRING_OPERATOR> <pattern: PATTERN> => Parameter::Path { operator, pattern },
}

COMMITS_PROPERTY: Property = {
    elapsed_time (open_paren close_paren)? => Property::ElapsedTime,
}

ADDITIONS_PROPERTY: Property = {
    elapsed_time (open_paren close_paren)? => Property::ElapsedTime,
}

DELETIONS_PROPERTY: Property = {
    elapsed_time (open_paren close_paren)? => Property::ElapsedTime,
}

CHANGES_PROPERTY: Property = {
    elapsed_time (open_paren close_paren)? => Property::ElapsedTime,
}

CONNECTIVE: Connective = {
    and => Connective::Conjunction,
}

NUMBER: i64 = {
    //INT => i64::from_str(<>).unwrap(),
    INT => (<>).parse::<i64>().unwrap(),
}

PATTERN: glob::Pattern = {
    <s: STRING> => glob::Pattern::new(&s[1..s.len()-1]).unwrap(),
}

STRING_OPERATOR: StringOperator = {
    eq    =>  StringOperator::Equal,
    ne    =>  StringOperator::Different,
}

RELATIONAL_OPERATOR: RelationalOperator = {
    eq    =>  RelationalOperator::Equal,
    ne    =>  RelationalOperator::Different,
    lt    =>  RelationalOperator::Less,
    le    =>  RelationalOperator::LessEqual,
    gt    =>  RelationalOperator::Greater,
    ge    =>  RelationalOperator::GreaterEqual,
}


